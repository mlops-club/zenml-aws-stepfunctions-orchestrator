# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetServiceConnectorResult',
    'AwaitableGetServiceConnectorResult',
    'get_service_connector',
    'get_service_connector_output',
]

@pulumi.output_type
class GetServiceConnectorResult:
    """
    A collection of values returned by getServiceConnector.
    """
    def __init__(__self__, auth_method=None, configuration=None, created=None, expires_at=None, id=None, labels=None, name=None, resource_id=None, resource_type=None, type=None, updated=None, workspace=None):
        if auth_method and not isinstance(auth_method, str):
            raise TypeError("Expected argument 'auth_method' to be a str")
        pulumi.set(__self__, "auth_method", auth_method)
        if configuration and not isinstance(configuration, dict):
            raise TypeError("Expected argument 'configuration' to be a dict")
        pulumi.set(__self__, "configuration", configuration)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if expires_at and not isinstance(expires_at, str):
            raise TypeError("Expected argument 'expires_at' to be a str")
        pulumi.set(__self__, "expires_at", expires_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated and not isinstance(updated, str):
            raise TypeError("Expected argument 'updated' to be a str")
        pulumi.set(__self__, "updated", updated)
        if workspace and not isinstance(workspace, str):
            raise TypeError("Expected argument 'workspace' to be a str")
        pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> str:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter
    def configuration(self) -> Mapping[str, str]:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> str:
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def updated(self) -> str:
        return pulumi.get(self, "updated")

    @property
    @pulumi.getter
    def workspace(self) -> Optional[str]:
        return pulumi.get(self, "workspace")


class AwaitableGetServiceConnectorResult(GetServiceConnectorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceConnectorResult(
            auth_method=self.auth_method,
            configuration=self.configuration,
            created=self.created,
            expires_at=self.expires_at,
            id=self.id,
            labels=self.labels,
            name=self.name,
            resource_id=self.resource_id,
            resource_type=self.resource_type,
            type=self.type,
            updated=self.updated,
            workspace=self.workspace)


def get_service_connector(id: Optional[str] = None,
                          name: Optional[str] = None,
                          workspace: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceConnectorResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['workspace'] = workspace
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zenml:index/getServiceConnector:getServiceConnector', __args__, opts=opts, typ=GetServiceConnectorResult, package_ref=_utilities.get_package()).value

    return AwaitableGetServiceConnectorResult(
        auth_method=pulumi.get(__ret__, 'auth_method'),
        configuration=pulumi.get(__ret__, 'configuration'),
        created=pulumi.get(__ret__, 'created'),
        expires_at=pulumi.get(__ret__, 'expires_at'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        type=pulumi.get(__ret__, 'type'),
        updated=pulumi.get(__ret__, 'updated'),
        workspace=pulumi.get(__ret__, 'workspace'))
def get_service_connector_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                 name: Optional[pulumi.Input[Optional[str]]] = None,
                                 workspace: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServiceConnectorResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['workspace'] = workspace
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zenml:index/getServiceConnector:getServiceConnector', __args__, opts=opts, typ=GetServiceConnectorResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetServiceConnectorResult(
        auth_method=pulumi.get(__response__, 'auth_method'),
        configuration=pulumi.get(__response__, 'configuration'),
        created=pulumi.get(__response__, 'created'),
        expires_at=pulumi.get(__response__, 'expires_at'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        name=pulumi.get(__response__, 'name'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        type=pulumi.get(__response__, 'type'),
        updated=pulumi.get(__response__, 'updated'),
        workspace=pulumi.get(__response__, 'workspace')))

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetServerResult',
    'AwaitableGetServerResult',
    'get_server',
    'get_server_output',
]

@pulumi.output_type
class GetServerResult:
    """
    A collection of values returned by getServer.
    """
    def __init__(__self__, auth_scheme=None, dashboard_url=None, deployment_type=None, id=None, metadata=None, name=None, server_url=None, version=None):
        if auth_scheme and not isinstance(auth_scheme, str):
            raise TypeError("Expected argument 'auth_scheme' to be a str")
        pulumi.set(__self__, "auth_scheme", auth_scheme)
        if dashboard_url and not isinstance(dashboard_url, str):
            raise TypeError("Expected argument 'dashboard_url' to be a str")
        pulumi.set(__self__, "dashboard_url", dashboard_url)
        if deployment_type and not isinstance(deployment_type, str):
            raise TypeError("Expected argument 'deployment_type' to be a str")
        pulumi.set(__self__, "deployment_type", deployment_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if server_url and not isinstance(server_url, str):
            raise TypeError("Expected argument 'server_url' to be a str")
        pulumi.set(__self__, "server_url", server_url)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="authScheme")
    def auth_scheme(self) -> str:
        return pulumi.get(self, "auth_scheme")

    @property
    @pulumi.getter(name="dashboardUrl")
    def dashboard_url(self) -> str:
        return pulumi.get(self, "dashboard_url")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> str:
        return pulumi.get(self, "server_url")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


class AwaitableGetServerResult(GetServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServerResult(
            auth_scheme=self.auth_scheme,
            dashboard_url=self.dashboard_url,
            deployment_type=self.deployment_type,
            id=self.id,
            metadata=self.metadata,
            name=self.name,
            server_url=self.server_url,
            version=self.version)


def get_server(id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zenml:index/getServer:getServer', __args__, opts=opts, typ=GetServerResult, package_ref=_utilities.get_package()).value

    return AwaitableGetServerResult(
        auth_scheme=pulumi.get(__ret__, 'auth_scheme'),
        dashboard_url=pulumi.get(__ret__, 'dashboard_url'),
        deployment_type=pulumi.get(__ret__, 'deployment_type'),
        id=pulumi.get(__ret__, 'id'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        server_url=pulumi.get(__ret__, 'server_url'),
        version=pulumi.get(__ret__, 'version'))
def get_server_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zenml:index/getServer:getServer', __args__, opts=opts, typ=GetServerResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetServerResult(
        auth_scheme=pulumi.get(__response__, 'auth_scheme'),
        dashboard_url=pulumi.get(__response__, 'dashboard_url'),
        deployment_type=pulumi.get(__response__, 'deployment_type'),
        id=pulumi.get(__response__, 'id'),
        metadata=pulumi.get(__response__, 'metadata'),
        name=pulumi.get(__response__, 'name'),
        server_url=pulumi.get(__response__, 'server_url'),
        version=pulumi.get(__response__, 'version')))
